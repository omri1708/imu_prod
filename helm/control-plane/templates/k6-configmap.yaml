{{- if .Values.synthetics.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cp.fullname" . }}-k6
  namespace: {{ .Values.namespace }}
data:
  k6.js: |
    import http from 'k6/http';
    import ws from 'k6/ws';
    import { check, sleep } from 'k6';

    export let options = {
      scenarios: {
        api: { executor: 'constant-vus', vus: __ENV.VUS || 5, duration: __ENV.DURATION || '20s' },
        ui:  { executor: 'constant-vus', vus: __ENV.VUS || 5, duration: __ENV.DURATION || '20s', startTime: '2s' },
        {{ if .Values.synthetics.ws.enabled -}}
        ws:  { executor: 'constant-vus', vus: __ENV.VUS || 3, duration: __ENV.DURATION || '20s', startTime: '4s' }
        {{- end }}
      },
      thresholds: {
        http_req_failed: ['rate<' + (__ENV.ERROR_RATE || "0.02")],
        http_req_duration: ['p(95)<' + (__ENV.P95_MS || "800")]
      }
    };

    export function api() {
      const url = __ENV.API;
      const r = http.get(url);
      check(r, { 'api 200': (res) => res.status === 200 });
      sleep(1);
    }

    export function ui() {
      const url = __ENV.UI;
      const r = http.get(url);
      check(r, { 'ui 200': (res) => res.status === 200 });
      sleep(1);
    }

    export function ws() {
      const url = __ENV.WS_URL;
      if (!url) { return; }
      const messages = parseInt(__ENV.WS_MESSAGES || "5");
      const interval = parseInt(__ENV.WS_INTERVAL_MS || "500");
      const res = ws.connect(url, {}, function (socket) {
        socket.on('open', function () {
          for (let i=0;i<messages;i++) {
            socket.send(JSON.stringify({type:"event", note:"k6 ping "+i}));
            sleep(interval/1000);
          }
        });
        socket.on('message', function (data) {
          // optional checks
        });
        socket.on('close', function () {});
        socket.setTimeout(function () { socket.close(); }, (messages*interval)+1000);
      });
      check(res, { 'ws connected': (r) => r && r.status === 101 }, { url });
    }
{{- end }}
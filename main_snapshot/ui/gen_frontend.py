# imu_repo/ui/gen_frontend.py
from __future__ import annotations
from typing import Dict, Any, List
import os, json, html

BASE_CSS = """
:root{
  --bg:#ffffff; --fg:#111111; --muted:#444444; --brand:#0b66ff;
  --focus:#ff9800; --link:#0b66ff;
}
*{box-sizing:border-box}
html{font-size:16px}
html[lang]{}
body{margin:0;background:var(--bg);color:var(--fg);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif;line-height:1.5}
a{color:var(--link)}
main{max-width:960px;padding:1.25rem;margin:0 auto}
h1,h2,h3{line-height:1.25}
img{max-width:100%;height:auto}
button{cursor:pointer;border:1px solid var(--muted);padding:.5rem .75rem;border-radius:.375rem;background:#fff}
button:focus, input:focus, textarea:focus, select:focus{outline:3px solid var(--focus);outline-offset:2px}
label{display:block;margin:.5rem 0 .25rem}
input,textarea,select{width:100%;padding:.5rem;border:1px solid var(--muted);border-radius:.375rem}
.skip-link{position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden}
.skip-link:focus{position:static;width:auto;height:auto;margin:1rem;display:inline-block;background:#000;color:#fff;padding:.5rem}
nav ul{list-style:none;padding:0;display:flex;gap:.75rem}
footer{margin-top:2rem;padding-top:1rem;border-top:1px solid #e8e8e8;color:var(--muted)}
"""

HTML_SHELL = """<!doctype html>
<html lang="{lang}">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>{title}</title>
<link rel="stylesheet" href="style.css"/>
</head>
<body>
<a class="skip-link" href="#content">דלג לתוכן</a>
<nav aria-label="ראשי">
  <ul>
{nav}
  </ul>
</nav>
<main id="content" tabindex="-1" role="main" aria-live="polite">
{content}
</main>
<footer role="contentinfo">
  <small>Generated by IMU UI Generator</small>
</footer>
<script>
document.addEventListener('DOMContentLoaded', function(){
  for(const el of document.querySelectorAll('[data-action=\"alert\"]')){
    el.addEventListener('click', ()=>alert(el.getAttribute('data-message')||'clicked'));
  }
});
</script>
</body>
</html>
"""

def _nav_items(pages: List[Dict[str,Any]]) -> str:
    out=[]
    for p in pages:
        name = html.escape(p.get("name","Page"))
        href = html.escape(p.get("file","index.html"))
        out.append(f'    <li><a href="{href}">{name}</a></li>')
    return "\n".join(out)

def _render_el(el: Dict[str,Any]) -> str:
    t = el.get("type")
    if t=="h1":
        return f"<h1>{html.escape(el.get('text',''))}</h1>"
    if t=="p":
        return f"<p>{html.escape(el.get('text',''))}</p>"
    if t=="img":
        src = html.escape(el.get("src","#"))
        alt = html.escape(el.get("alt",""))
        return f'<figure><img src="{src}" alt="{alt}"/><figcaption>{html.escape(el.get("caption",""))}</figcaption></figure>'
    if t=="button":
        label = html.escape(el.get("label","OK"))
        msg   = html.escape(el.get("message",""))
        return f'<button type="button" data-action="alert" data-message="{msg}">{label}</button>'
    if t=="input":
        lid = html.escape(el.get("id","input1"))
        lab = html.escape(el.get("label",""))
        typ = html.escape(el.get("input_type","text"))
        ph  = html.escape(el.get("placeholder",""))
        req = " aria-required=\"true\" required" if el.get("required") else ""
        return f'<label for="{lid}">{lab}</label><input id="{lid}" type="{typ}" placeholder="{ph}"{req}/>'
    return ""

def generate_site(spec: Dict[str,Any], out_dir: str) -> None:
    """
    spec = {
      "lang":"he",
      "title":"App",
      "pages":[
         {"name":"Home","file":"index.html","elements":[...]},
         {"name":"About","file":"about.html","elements":[...]}
      ]
    }
    """
    os.makedirs(out_dir, exist_ok=True)
    with open(os.path.join(out_dir,"style.css"),"w",encoding="utf-8") as f:
        f.write(BASE_CSS)
    pages = spec.get("pages",[])
    nav = _nav_items(pages)
    for p in pages:
        body=[]
        for el in p.get("elements",[]):
            body.append(_render_el(el))
        html_page = HTML_SHELL.format(
            lang=html.escape(spec.get("lang","he")),
            title=html.escape(spec.get("title","IMU App")+" — "+p.get("name","Page")),
            nav=nav,
            content="\n".join(body)
        )
        with open(os.path.join(out_dir, p.get("file","index.html")), "w", encoding="utf-8") as f:
            f.write(html_page)

if __name__=="__main__":
    demo = {
        "lang":"he","title":"Demo",
        "pages":[
            {"name":"בית","file":"index.html","elements":[
                {"type":"h1","text":"שלום עולם"},
                {"type":"p","text":"דף לדוגמה עם נגישות בסיסית."},
                {"type":"img","src":"hero.png","alt":"איור של רצועת גאמא","caption":"איור"},
                {"type":"input","id":"email","label":"אימייל","input_type":"email","placeholder":"you@example.com","required":True},
                {"type":"button","label":"שלח","message":"נשלח!"}
            ]}
        ]
    }
    generate_site(demo, "/mnt/data/imu_repo/site")
    print("OK")